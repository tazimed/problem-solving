algorithms with javascript:
--------------------------
problem 1 - 2 : voir le cahier rouge ;

3 -- power of two : 

we will check if a number is power of two or not 
if the remainder of 2^x = n , n is power of two 

function IsPowerOfTwo(n){
  if(n<1) return false ;
  while(n>1){
    if(n%2!==0){    
      return false ;
    }
    n=n/2
  }
  return true ;
}

console.log(IsPowerOfTwo(4)) //true
console.log(IsPowerOfTwo(5)) //false
console.log(IsPowerOfTwo(8)) //true

input size reduced by half : big O = O(logn) ;

autre solution avec binaire : big O =O(1) 

function IsPowerOfTwo(n){
  if(n<1) return false ;
  return (n&(n-1))===0
}
    ------------------------------------------------------------------------------
explication : Pourquoi Utiliser n & (n - 1) pour Détecter les Puissances de 2 ?

L'opération n & (n - 1) est une astuce binaire pour vérifier si un nombre n est une 
puissance de 2. Voici pourquoi soustraire 1 (n - 1) est crucial et comment cela fonctionne :
1. Propriété Clé des Puissances de 2 en Binaire

    Représentation binaire :
    Une puissance de 2 a exactement un 1 suivi de zéros.

        Exemples :

            8 (2³) → 1000

            16 (2⁴) → 10000

    Soustraire 1 (n - 1) :
    Cela inverse tous les bits après le 1 (y compris le 1 lui-même) :

        8 - 1 = 7 → 0111

        16 - 1 = 15 → 01111

2. Effet de l'Opération n & (n - 1)

    Pour une puissance de 2 :

        n et n - 1 n'ont aucun 1 en commun.
   ---------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------


                Recursion : recursivité

when a function call itself :
1-the base case - stops the recursion 
2-the function calls itself 

Fibonnacci :
 
function recursiveFibonacci(n){
  if(n<2){
    return n ;
  }
  return recursiveFibonacci(n-1)+recursiveFibonacci(n-2);
}

big(o) = O(2^n);

factorial n! : 

function factorialRecursive(n){
  if(n<2) return n ;
  return n * factorialRecursive(n-1)
}

big(o) = O(n);

//3 -- 
function SumToN(n){
  if(n==1 || n==0){
    return n ;
  }
  return n+SumToN(n-1)
}

// console.log(SumToN(5))

//4 -- 
function CountDigit(n){
  if(n<=10){
    return 1;
  }
  return 1+CountDigit(Math.floor(n/10));
}

// console.log(CountDigit(15)) // 2

//5 --
function reverseString(s){
  if(s.length<=1){
    return s
  }
  return s[s.length-1]+reverseString(s.slice(0,s.length-1))
}
// console.log(reverseString('hello')) // olleh

// --6
function power(base, exponent) {

  if(exponent===0){
    return 1 ;
  }
  return base*power(base, exponent-1)
}

console.log(power(2,3)) //8



----------------------------------------------------------------------------------------------

			Search Algorithm
			----------------

1-- problem 1 :  Linear Search 
return the index Of An Element ; else return -1 

const arr = [-2, 4, 10, 12, 15];
function IndexOf(arr, n) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] === n) {
      return i;
    }
  }
  return -1;
}

console.log(IndexOf(arr, 4));


2-- problem 2 :  Binary Search 

const arr = [0, 2, 3, 4, 5];
function BinarySearch(arr, n) {
  let leftIndex = 0;
  let rightIndex = arr.length - 1;
  while (leftIndex <= rightIndex) {
      let middleIndex = Math.floor((leftIndex + rightIndex) / 2);
    if (arr[middleIndex] === n) {
      return middleIndex;
    }
    if (n < arr[middleIndex]) {
      rightIndex = middleIndex - 1;
    } else {
      leftIndex = middleIndex + 1;
    }
  }
  return -1;
}

// the array in parameter should be sorted
console.log(BinarySearch(arr, 4));

// recursive 

function RecursiveFindIndex(arr, n) {
  const helper = (first = 0 , last = arr.length-1) => {
    const middle = Math.floor((first + last)/2) ;
    if(first > last) return -1 ;
    if(n===arr[middle]){
      return middle ;
    }
    if(n < arr[middle]){
      return helper( first ,middle - 1);
    }else{
      return helper( middle + 1 ,last);
    }
  }
    return helper() ;
}
  
console.log(RecursiveFindIndex([1, 2, 3, 4, 5], 5)); // → 4

----------------------------------------------------------------------------------------------
				sort algorithm
				--------------

1-- tri a bulles - bubble sort 

function sortingArray(arr) {
  let x = 0;
  let IsSorted = false;
  while (IsSorted === false) {
    IsSorted = true;
    for (let i = 0; i < arr.length - 1; i++) {
      if (arr[i] > arr[i + 1]) {
        x = arr[i];
        arr[i] = arr[i + 1];
        arr[i + 1] = x;
        IsSorted = false;
      }
    }
  }
  return arr ;
}

console.log(sortingArray([3, 2, 4, -2, 5, 9, -4]));
 
2-- tri par insertion - insertion sort 


function InsertionSort(arr) {
  for(let i = 1 ; i<arr.length ;i++){
    let x = arr[i];
    let j = i-1 ;
    while(x<arr[j]){
      arr[j+1]=arr[j];
      j--
    }
    arr[j+1]=x;
  }
  return arr ;
}
arr = [2, 4, 7, -4, 5, 3];
console.log(InsertionSort(arr));



3 -- quick sort

function quickSort(arr) {
  if(arr.length<2){
    return arr;
  }
  let pivot = arr[arr.length-1];
  let left = [];
  let right = [] ;
  for(let i = 0;i<arr.length-1;i++){
    if(arr[i]<pivot){
      left.push(arr[i])
    }else{
      right.push(arr[i])
    }
  }
  return [...quickSort(left),pivot,...quickSort(right)]
}
arr = [2, 4, 7, -4, 5, 3];
console.log(quickSort(arr));

--4 Merge Sort 

function mergeSort(arr) {
  if(arr.length<2){
  return arr ;
  }
  let mid = Math.floor(arr.length/2);
  let leftArr = arr.slice(0,mid)
  let rightArr = arr.slice(mid)
  return merge(mergeSort(leftArr),mergeSort(rightArr))
}
function merge(leftArr,rightArr){
  let sortedArr = [];
  while(leftArr.length && rightArr.length){
    if(leftArr[0]<rightArr[0]){
      sortedArr.push(leftArr.shift())
    }else{
      sortedArr.push(rightArr.shift())
    }
  }
  return [...sortedArr, ...leftArr , ...rightArr]
}
arr = [2, 4, 7, -4, 5, 3];
console.log(mergeSort(arr));

explication deepseek (https://chat.deepseek.com/a/chat/s/cadb0f10-4ca3-4f2f-83e6-8d8cd2df912f)

big(o) = O(n logn)


----------------------------------------------------------------------------------------------
				Misc. Problem
				-------------

1 -- cartesien product  / produit cartesien

2 --  Climbing sataicase / escalier de montée
function climbing(n){
  let arr = [1,2]
  if(n<=2){
    return n
  }
  for(i=2;i<n;i++){
  arr.push(arr[i-1]+arr[i-2])
  }
  return arr[n-1];
}
console.log(climbing(4))

big (o) = O(n)

3 -- towe of honoi 

function towerOfHonoi(n,from,using,to){
  if(n==1){
    console.log(`tranfer ${n} from ${from} to ${to}`)
    return ;
  }
  towerOfHonoi(n-1,from,to,using)
  console.log(`transfer ${n} from ${from} to ${to}`)
  towerOfHonoi(n-1,using,from,to)
}

towerOfHonoi(5,'A','B','C')


----- exercices : 

1 -- : Trouver le Plus Grand Commun Diviseur PGCD en utilisant l'algorithme d'Euclide 

function findGCD(a,b){
  if(b==0){
    return a
  }
  return findGCD(b,a%b)
}
console.log(findGCD(12,8))

function findGCDwithWhile(a,b){
  while(b>0){
    x = a ;
    a = b ;
    b = x % b ;
  }
  return a ;
}

console.log(findGCDwithWhile(12,8))


2 -- finding permutation : 

function permutation(arr){
  let result = [] ;
  let total 
  if(arr.length<=1) return [arr]
  for(let i = 0 ; i<arr.length ; i++){
    let rest = arr.slice(0,i).concat(arr.slice(i+1));
    let perm = permutation(rest);
    for(let p of perm ){
      result.push([arr[i],...p])
    }
      
  }
return result;
}
console.log(permutation([1,2,3,4,5,6,7,8,9]))
console.log(permutation([1,2,3,4,5,6,7,8,9]).length)

3 --  finding combination 

function combination(arr,k){
  if(k===0) return [[]] ;
  if(arr.length<k) return [] ;
  let result = [] ;
  for(let i = 0 ;i<=arr.length - k ;i++){
    let comb = combination(arr.slice(i+1),k-1)
    for(let c of comb){
      result.push([arr[i],...c])
    }
  }
  return result ;
}

console.log(combination([1,2,3,4],2))




























